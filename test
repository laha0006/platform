pipeline {
    agent any

    environment {
        IMAGE_NAME = readMavenPom().getArtifactId()
        GROUP_ID = readMavenPom().getGroupId()
        TAG = "${readMavenPom().getVersion()}-SNAPSHOT"
        JOB_NAME = "${env.JOB_BASE_NAME}"

        SONARQUBE = 'https://sonarqube.devops.sbsky.dk'
        CONTAINER_REGISTRY = 'bksbsip.azurecr.io'

        GITOPS_ORG = 'bksbsip'
        GITOPS_PROJECT = 'gitops_sandbox'
        GITOPS_REPO = setDefaultGitOpsRepo() // kan give med som variabel og bestemmer hvilke argo app der skal deployes til

        COMMIT = sh(returnStdout: true, script: 'git log -1').trim()
        AUTHOR_NAME = sh(returnStdout: true, script: "git log -1 --pretty=format:'%an'").trim()
        AUTHOR_EMAIL = sh(returnStdout: true, script: "git log -1 --pretty=format:'%ae'").trim()

        // TEST CONATINER TIMEOUTS
        TESTCONTAINERS_TIMEOUT = '300'
        QUARKUS_DEVSERVICES_TIMEOUT = '300s'
    }

    tools {
        maven 'maven-3'
        jdk 'jdk-21'
    }

    stages {
        stage('check Maven pom') {
            steps {
                script {
                    def EXPECTED_GROUP_ID = "dk.brklub"

                    echo "Checking expected group ID to be: '${EXPECTED_GROUP_ID}'"

                    if (GROUP_ID != EXPECTED_GROUP_ID) {
                        error "HOV! JEG TROR DER ER NOGLE DER HAR GLEMT AT ÆNDRE GROUP ID I DERES POM.XML!? \n DEN STÅR TIL: '${GROUP_ID}' MEN BØR VÆRE: '${EXPECTED_GROUP_ID}'"
                    } else {
                        echo "Group ID validation successful"
                    }

                    def pomContent = readFile('pom.xml')
                    if (pomContent.contains('<sonar.skip>true</sonar.skip>')) {
                        error "${AUTHOR_NAME} SKAL FYRES -> fjern sonar.skip fra pom"
                    }
                }
            }
        }
        stage('Debug Environment') {
            steps {
                sh 'env | grep -E "TESTCONTAINERS|QUARKUS"'
            }
        }
        stage('Maven Package') {
            steps {
                script {
                    configFileProvider([configFile(fileId: 'global-maven-settings', variable: 'MAVEN_SETTINGS')]) {
                        sh "mvn clean -U package -s ${MAVEN_SETTINGS}"
                    }
                    // archiveArtifacts '**/*.yml'
                }
            }
        }

    stage('Sonar Scan') {
            steps {
                script {
                    echo "Find sonarprojekt her: ${SONARQUBE}/dashboard?id=${JOB_NAME}" 
                    withSonarQubeEnv('SonarQube') {
                        // svarer til: mvn sonar:sonar -Dsonar.token={token} -Dsonar.host.url={sonarurl} -Dsonar.qualitygate.wait=true
                        // sh "mvn org.sonarsource.scanner.maven:sonar-maven-plugin:4.0.0.4121:sonar -Dsonar.qualitygate.wait=true -Dsonar.projectKey=${JOB_NAME} -Dsonar.projectName=${JOB_NAME} -Dsonar.coverage.jacoco.xmlReportPaths=target/jacoco-report/jacoco.xml"
                        sh "mvn org.sonarsource.scanner.maven:sonar-maven-plugin:4.0.0.4121:sonar -Dsonar.qualitygate.wait=true -Dsonar.projectKey=${JOB_NAME} -Dsonar.projectName=${JOB_NAME}"
                    }
                }
            }
        }


        stage('Maven Deploy') {
            when { expression { env.MVN_DEPLOY == "true"} } // kører kun, hvis MVN_DEPLOY variabel er sat til true
            steps {
                script {
                    configFileProvider([configFile(fileId: 'global-maven-settings', variable: 'MAVEN_SETTINGS')]) {
                        echo "MVN_DEPLOY value is: ${env.MVN_DEPLOY}"
                        sh "mvn versions:set -DnewVersion=${TAG} -DprocessAllModules=true" // overskriver alle versioner med den yderste poms version
                        sh "mvn deploy -DskipTests -s ${MAVEN_SETTINGS}"
                    }
                }
            }
        }


        stage('Docker Build') {
            steps {
                script {
                    sh "docker build -f src/main/docker/Dockerfile.jvm -t ${CONTAINER_REGISTRY}/${IMAGE_NAME}:${TAG} ."
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                script {
                    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                        sh "trivy image --db-repository public.ecr.aws/aquasecurity/trivy-db --severity HIGH,CRITICAL --ignore-unfixed --no-progress --timeout 15m ${CONTAINER_REGISTRY}/${IMAGE_NAME}:${TAG}"
                    }
                }
            }
        }

        stage('Docker Push') {
            steps {
                script {
                    docker.withRegistry("https://${CONTAINER_REGISTRY}", 'container-registry') {
                        sh "docker push ${CONTAINER_REGISTRY}/${IMAGE_NAME}:${TAG}"
                    }
                }
            }
        }

        stage('GitOps Push') {
            steps {
                script {
                    dir ('gitops') {

                        //Henter gitops projekt
                        withCredentials([usernamePassword(credentialsId: 'azure-git-read-write-access', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                            git branch: 'master', url: "https://${GIT_USERNAME}:${GIT_PASSWORD}@dev.azure.com/${GITOPS_ORG}/${GITOPS_PROJECT}/_git/${GITOPS_REPO}"
                        }

                        // Finder kubernetes.yml som belv oprettet under byg
                        def data = readYaml(file: '../target/kubernetes/kubernetes.yml')
                        // Retter nødvændige variable i kubernetes.yml
                        for (int i = 0; i < data.size(); ++i) {
                            if (data[i].kind == 'Deployment') {
                                // sæt image url
                                data[i].spec.template.spec.containers[0].image = "${CONTAINER_REGISTRY}/${IMAGE_NAME}:${TAG}"
                                // sæt pull secret name
                                data[i].spec.template.spec.imagePullSecrets = [['name': 'azure-brklub-container-registry-credential']]

                                // sæt resource configuration
                                data[i].spec.template.spec.containers[0].resources = [
                                    limits: [
                                        memory: '2Gi',
                                    ],
                                    requests: [
                                        cpu: '200m',    
                                        memory: '500Mi'
                                    ]
                                ]
                                // Gemmer filen i gitops projektet
                                writeYaml(file: "./brklub/templates/${IMAGE_NAME}/kubernetes.yml", datas: data, overwrite: true)
                            }
                            if (data[i].kind == 'Job') {
                                data[i].metadata.annotations = [:]
                                data[i].metadata.annotations.put('argocd.argoproj.io/sync-options', "Replace=true")

                                data[i].spec.template.spec.containers[0].image = "${CONTAINER_REGISTRY}/${IMAGE_NAME}:${TAG}"
                                data[i].spec.template.spec.imagePullSecrets = [['name': 'azure-brklub-container-registry-credential']]

                                // Skriver filen ind i gitops projektet
                                writeYaml(file: "./brklub/templates/${IMAGE_NAME}/kubernetes.yml", datas: data, overwrite: true)
                            }
                        }
                        // gemmer yaml-filen, så vi kan se den i Jenkins
                        archiveArtifacts "brklub/templates/${IMAGE_NAME}/kubernetes.yml"

                        // Pusher ændringer til GitOps projektet
                        sh 'git config --global user.email "jenkins@dafolo.dk"'
                        sh 'git config --global user.name "Jenkins"'
                        sh "git add brklub/templates/${IMAGE_NAME}/kubernetes.yml"
                        sh "git commit -m \"kubernetes.yml changed by jenkins - ${IMAGE_NAME}:${TAG}\""
                        sh 'git push origin HEAD:master'
                    }
                }
            }

        }
    }
}


def setDefaultGitOpsRepo() {
    // If GITOPS_REPO is not set, assign a default value
    if (!env.GITOPS_REPO) {
        env.GITOPS_REPO = 'dev-GitOps-BrKlub-Apps'
    }

    // Return the value for potential further use
    return env.GITOPS_REPO
}

 